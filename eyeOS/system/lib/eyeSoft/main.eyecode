<?php
/*
  ___  _ __   ___ _   _  ___
 / _ \| '_ \ / _ \ | | |/ _ \
| (_) | | | |  __/ |_| |  __/
 \___/|_| |_|\___|\__, |\___|
                  |___/

oneye is released under the GNU Affero General Public License Version 3 (AGPL3)
 -> provided with this release in license.txt
 -> or via web at www.gnu.org/licenses/agpl-3.0.txt

Copyright Â© 2005 - 2010 eyeos Team (team@eyeos.org)
             since 2010 Lars Knickrehm (mail@lars-sh.de)
*/

function lib_eyeSoft_init () {
	
}

function lib_eyeSoft_testMirror ($params = '') {
	if (is_array($params) == false && count($params < 1)) {
		errorCodes('setErrorCode', array(INCORRECT_PARAMS));
		return false;
	}
	
	$http = eyeURL('getHTTPClient');
	$http->setURL($params[0]);
	$http->sendRequest();
	if ($http->getResponseCode() != 200) {
		return false;
	}
	$xml = $http->getResponseBody();
	$myMirror= eyeXML('xml2array',array($xml));
	if (is_array($myMirror) === true) {
		if (is_array($myMirror['eyePorts'])) {
			// for old repos
			$basexmlnode = 'eyePorts';
			$subxmlnode = 'portServer';
		} else {
			$basexmlnode = 'repos';
			$subxmlnode = 'repoServer';
		}
		$successes = 0;
		$fails = 0;
		foreach($myMirror[$basexmlnode][0][$subxmlnode] as $rValue) {
			$rName = basename($rValue['name'][0]);
			$http->setURL('http://'.$rValue['address'][0].$rValue['path'][0]);
			$http->sendRequest();
			if ($http->getResponseCode() != 200) {
				$fails++;
			} else {
				$rContent = $http->getResponseBody();
				$rContent = eyeXML('xml2array',array($rContent));
				if (!is_array($rContent['packages'])) {
					$fails++;
				} else {
					$successes++;
				}
			}
		}
		return $successes . ':' . $fails;
	} else {
		return false;
	}
}

function lib_eyeSoft_updateCache () {
	// delete the old cache before creating a new one
	$cache = EYE_ROOT . '/' . SYSTEM_DIR . '/' . SYSTEM_CONF_DIR . '/repos/cache/';
	if (vfs('real_fileExists', array($cache))) {
		vfs('real_rmdir', array($cache));
	}
	vfs('real_mkdir', array($cache));
	
	// start with downloading script
	$errors = 0;
	$config = eyeXML('getXMLfile',array(EYE_ROOT.'/'.SYSTEM_DIR.'/'.SYSTEM_CONF_DIR.'/repos.xml'));
	foreach($config['repos'][0]['mirrors'][0]['mirror'] as $addr) {
		$http = eyeURL('getHTTPClient');
		$http->setURL($addr);
		$http->sendRequest();
		if ($http->getResponseCode() != 200) {
			$errors++;
		} else {
			$content = $http->getResponseBody();
			$myMirror = eyeXML('xml2array',array($content));
			if (is_array($myMirror) === true) {
				if (is_array($myMirror['eyePorts'])) {
					// for old repos
					$basexmlnode = 'eyePorts';
					$subxmlnode = 'portServer';
				} else {
					$basexmlnode = 'repos';
					$subxmlnode = 'repoServer';
				}
				foreach($myMirror[$basexmlnode][0][$subxmlnode] as $rValue) {
					$rName = basename($rValue['name'][0]);
					$http->setURL('http://'.$rValue['address'][0].$rValue['path'][0]);
					$http->sendRequest();
					if ($http->getResponseCode() != 200) {
						$errors++;
					} else {
						$rContent = $http->getResponseBody();
						$rContentArr = eyeXML('xml2array',array($rContent));
						if (!is_array($rContentArr['packages'])) {
							$errors++;
						} else {
							$cachefile = EYE_ROOT.'/'.SYSTEM_DIR.'/'.SYSTEM_CONF_DIR.'/repos/cache/'.$rName.'.xml';
							if(!file_exists($cachefile)) {
								vfs('real_create',array($cachefile));
							}
							$fp = vfs('real_open',array($cachefile,'w'));
							fwrite($fp, $rContent);
							fclose($fp);
						}
					}
				}
			}
		}
	}
	if ($errors > 0) {
		return $errors;
	} else {
		return true;
	}
}

function lib_eyeSoft_generatePackageList ($params = '') {
	if (is_array($params)) {
		$category = $params[0];
	} else {
		$category = null;
	}	
	$cache = vfs('real_getDirContent',array(EYE_ROOT.'/'.SYSTEM_DIR.'/'.SYSTEM_CONF_DIR.'/repos/cache/'));
	$list = Array();
	if($cache && is_array($cache)) {
		foreach($cache as $repo) {
			$xml = eyeXML('getXMLfile',array($repo));
			//$myArray = eyeXML('xml2array',array($xml));
			foreach($xml['packages'][0]['package'] as $package) {
				
				// Category check
				if ($category !== null && $category !== $package['category'][0]) {
					continue;	// skip to the next iteration
				}
				
				// Version check
				if (isset($package['minVersion'])) {
					if(eyeSoft('compareVersions', array($package['minVersion'][0], ONEYE_VERSION)) == true) {
						continue;	// skip to the next iteration
					}
				}
				if (isset($package['maxVersion'])) {
					if(eyeSoft('compareVersions', array(ONEYE_VERSION, $package['maxVersion'][0])) == true) {
						continue;	// skip to the next iteration
					}
				}
				
				// Check it if doesn't already exist in the list
				$found = false;
				for ($p = 0; $p < count($list); $p++) {
					if ($list[$p]['key'][0] == $package['key'][0]) {
						// Check versions
						if (eyeSoft('compareVersions', array($list[$p]['version'][0], $package['version'][0]))) {
							// if better version, overwrite it
							$list[$p] = $package;
						}
						$found = true;
						break;
					}
				}
				
				// Otherwise, add it to the list
				if (!$found) {
					$list[] = $package;
				}
			}
		}
		return $list;
	} else {
		return false;
	}
}

function lib_eyeSoft_compareVersions ($params) {
	if (is_array($params) == false && count($params < 2)) {
		errorCodes('setErrorCode', array(INCORRECT_PARAMS));
		return false;
	}
	
	$dot_1 = strpos($params[0], '.');
	$dot_2 = strpos($params[1], '.');
	$num_1 = ($dot_1 !== false) ? substr($params[0], 0, $dot_1) : $params[0];
	$num_2 = ($dot_2 !== false) ? substr($params[1], 0, $dot_2) : $params[1];
	
	if (intval($num_1) < intval($num_2)) {
		return true;
	} elseif  ($dot_1 === false || $dot_2 === false) {
		return false;
	} else {
		$params[0] = substr($params[0], $dot_1+1);
		$params[1] = substr($params[1], $dot_1+1);
		return eyeSoft('compareVersions', array($params[0], $params[1]));
	}
}

?>